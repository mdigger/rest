package rest

import "net/http"

// Handler может являться любая функция, которая принимает Context и может
// возвращать ошибку. Возвращаемая ошибка может быть записана в лог и, если
// сервер еще не отсылал никакого ответа, то будет возвращена вместе с ошибкой
// в качестве ответа.
type Handler func(*Context) error

// ServeHTTP поддерживает интерфейс http.Handler для Handler, что позволяет
// использовать его с любыми совместимыми с http.Handler библиотеками.
func (h Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	context := newContext(w, r)        // инициализируем новый контекст запроса
	if err := h(context); err != nil { // выполняем обработчик
		// пытаемся отослать ошибку, если еще ничего не отдавали
		context.Send(err)
	}
	// освобождаем контекст запроса и помещаем его обратно в пул
	context.close()
}

// Handlers объединяет несколько обработчиков запросов в очередь. Они будут
// выполняться в той последовательности, в которой были добавлены одна за
// другой, пока не будут выполнены все или пока не вернется первая ошибка,
// которая прерывает процес дальнейшей обработки. Так же дальнейшая обработка
// прерывается в том случае, если обработчик отдал ответ клиенту. С помощью
// этой функции можно объединять несколько обработчиков в один.
func Handlers(handlers ...Handler) Handler {
	return func(c *Context) error {
		for _, h := range handlers {
			// выполняем обработчик
			if err := h(c); err != nil {
				return err // в случае ошибки прерываем дальнейшую обработку
			}
			// если данные уже переданы, то дальнейшая обработка прерывается
			if c.sended {
				break
			}

		}
		return nil
	}
}
